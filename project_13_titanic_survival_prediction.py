# -*- coding: utf-8 -*-
"""Project 13. Titanic Survival Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gFJVQL7VwHUbC6_5AKR0pAU2S6agK7fH

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# loading the from CSV file to Pandas Dataframe
titanic_data = pd.read_csv('/content/Titanic data.csv')

# printing the first five rows of the dataframe
titanic_data.head()

# number of rows and columns of the dataset
titanic_data.shape

# getting some information about the dataset
titanic_data.info()

# checking the missing values in each columns
titanic_data.isnull().sum()

"""Handling the Missing values"""

# drop the "Cabin" column from the dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis=1)

# replacing the missing values in 'Age' column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace = True)

# finding the mode value of the 'Embarked' column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

# replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

# checking the missing values in each columns
titanic_data.isnull().sum()

"""Data Analysis"""

# getting some statistical measures of the dataset
titanic_data.describe()

# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data Visualization"""

sns.set()

# making the count plot for "Survived" column
sns.countplot(data=titanic_data, x='Survived', palette='muted')

titanic_data['Sex'].value_counts()

# making the count plot for "Sex" column
sns.countplot(data=titanic_data, x='Sex', palette='muted')

# number of survivors Gender wise
sns.countplot( data= titanic_data, x='Sex', hue='Survived')

# making a count plot for "Pclass" column
sns.countplot(data=titanic_data, x='Pclass', palette='muted')

# number of survivors Pclass wise
sns.countplot( data= titanic_data, x='Pclass', hue='Survived')

"""Encoding the Catagorical Column"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

# converting catagorical columns
titanic_data.replace({'Sex':{'male':0, 'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""Seperating Features and Target"""

X = titanic_data.drop(columns=['Name', 'Ticket', 'PassengerId', 'Survived'], axis=1)
Y = titanic_data['Survived']

print(X)

print(Y)

"""Splitting the Data into Training Data and Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the Logistic Regression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data =', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data =', test_data_accuracy)

X_train.head()

"""Building a Predictive System"""

input_data = (3,0,34.5,0,0,7.8292,2)

# changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The person has not survived')
else:
  print('The person has survived')

